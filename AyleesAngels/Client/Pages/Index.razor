@using AyleesAngels.Shared.Models;
@using AyleesAngels.Shared.Utils;
@using System.Security.Claims;
@using System.Security;


@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


@page "/"

<div class="hero">
    <Jumbotron  />
</div>
    

<div class="container">
    <AAHeader Heading="Latest News" SubHeading="Recent Posts" ></AAHeader>
    <AuthorizeView>
        <Authorized>
            <NavLink class="nav-link text-center" href="addpost">
                <button class="btn btn-small btn-success">Add a Post</button>
            </NavLink>
        </Authorized>
    </AuthorizeView>
    <div class="row text-center">
        <div class="col-lg-8 col-md-10 mx-auto ">
            @foreach (var post in blogPosts)
            {
                <BlogPostPreview BlogPost=@post></BlogPostPreview>
                
                <AuthorizeView >
                    <Authorized>
                        <NavLink class="nav-link d-inline" href="@($"/editpost/{post.Id}")">
                            <a class="text-warning">Edit</a>
                        </NavLink>
                        <a @onclick="() => DeletePost(post.Id)" class="text-danger">Delete</a>
                    </Authorized>
                </AuthorizeView>
                
                
            }
            
        </div>
    </div>
</div>



@code {



    public List<BlogPost> blogPosts { get; set; } = new List<BlogPost>();

    private string _authMessage;
    
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    


    protected override async Task OnInitializedAsync()
    {

        await LoadBlogPosts();
        await GetClaimsPrincipalData();

    }

    private async Task LoadBlogPosts()
    {
        try
        {
            var blogPostsResponse = await ClientFactory.CreateClient("AyleesAngels.ServerAPI.Guest")
                .GetFromJsonAsync<ServiceResponse<List<BlogPost>>>(Urls.BlogPosts);
            //blogPosts = blogPostsResponse.OrderByDescending(p => p.Posted).ToList();
            blogPosts = blogPostsResponse.Data.OrderByDescending(p => p.Posted).ToList();



        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

    }

    private async Task DeletePost(int postId)
    {
        
        
        var response = await ClientFactory.CreateClient("AyleesAngels.ServerAPI").DeleteAsync(Urls.DeleteBlogPost.Replace("{id}", postId.ToString()));

        await LoadBlogPosts();

    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        


       

        
    }


}