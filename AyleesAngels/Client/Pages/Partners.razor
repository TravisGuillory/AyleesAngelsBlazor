@page "/partners"

@using AyleesAngels.Shared.Models;
@using AyleesAngels.Shared.Utils;

@inject IHttpClientFactory ClientFactory



<div class="container">
    <AAHeader Heading="Thank You to Our Amazing Partners" />
    <div class="text-center">
        <AuthorizeView Roles="Admin">
            <Authorized>
                <NavLink class="nav-link d-inline" href="/addpartner">
                    <button class="btn btn-small btn-success">Add Partner</button>
                </NavLink>
            </Authorized>
        </AuthorizeView>
        
        
    </div>
    
    <div class="row ">
        <div class="col-lg-8 col-md-10 mx-auto text-left">
            @foreach (var partner in partners)
            {
                string altTextString = partner.Name + " logo";
        <div class="row">
            <div class="col mb-2">

                <a href=@partner.LinkUrl>
                    <ThumbnailImage ImageUrl=@partner.ImageUrl AltText=altTextString />
                </a>
                    <h4 class="d-inline" href="@partner.LinkUrl">@partner.Name</h4>
                
                <AuthorizeView Roles="Admin">
                    <Authorized>
                        <NavLink class="nav-link d-inline" href="@($"/editpartner/{partner.Id}")">
                            
                            <a href="@($"/editpartner/{partner.Id}")" class="text-warning">Edit</a>
                        </NavLink>
                        
                        <a  @onclick="() => DeletePartner(partner.Id)" class="text-danger">Delete</a>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>}

        </div>
    </div>
</div>




@code {

    public List<Partner> partners { get; set; } = new List<Partner>();

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Partners component.");
        await LoadPartners();

    }

    private async Task LoadPartners()
    {
        try
        {

            var client = ClientFactory.CreateClient("AyleesAngels.ServerAPI.Guest");
            var response = await client.GetFromJsonAsync<ServiceResponse<List<Partner>>>(Urls.Partners);

            partners = response.Data;

        }
        catch (Exception ex)
        {

            Console.WriteLine("Error fetching partners" + ex.Message);
        }
    }

    private async Task DeletePartner(int postId)
    {
        var response = await ClientFactory.CreateClient("AyleesAngels.ServerAPI").DeleteAsync(Urls.DeletePartner.Replace("{id}", postId.ToString()));

        await LoadPartners();

    }

}
